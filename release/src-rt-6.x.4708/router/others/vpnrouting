#!/bin/sh

#
# Copyright (C) 2015 shibby
#
# changes/fixes: 2019 by pedro
#

PID=$$
SERVICE="$1"


[ -z "$SERVICE" ] && {
	echo "usage: vpnrouting VPNSERVICE start|stop"
	exit 0
}


find_iface() {	# check for proper interface
	if [ "$SERVICE" == "client1" ]; then
		IFACE="tun11"
		ID="311"
		CID="1"
	elif [ "$SERVICE" == "client2" ]; then
		IFACE="tun12"
		ID="312"
		CID="2"
	elif [ "$SERVICE" == "client3" ]; then
		IFACE="tun13"
		ID="313"
		CID="3"
	else
		echo "vpnrouting: Interface not found!"
		logger -t vpnrouting[$PID] "Interface not found!"
		exit 0
	fi

	PIDFILE="/var/run/vpnrouting$ID.pid"
	FIREWALL="/etc/openvpn/fw/vpnrouting$ID.sh"
	LOGS="logger -t vpnrouting[$PID][$IFACE]"
}

cleanup() {
	ip route flush table $ID
	ip route flush cache

	[ "$(ip rule | grep "lookup $ID" | wc -l)" -gt 0 ] && {
		ip rule del fwmark $ID table $ID
	}

	rm $FIREWALL
	service firewall restart

	ipset destroy vpnrouting$ID
	sed -i /etc/dnsmasq.ipset -e "/vpnrouting$ID/d"

	$LOGS "Clean-up"
}

startRouting() {
	local CONNECTED=0 VPN_GW="" DNSMASQ=0 VAL1 VAL2 VAL3 i

	cleanup

	# wait for gateway
	while [ "$CONNECTED" -eq 0 ]; do
		VPN_GW=$(ifconfig $IFACE | awk '/inet addr/ {split ($2,A,":"); print A[2]}')
		[ -n "$VPN_GW" ] && {
			$LOGS "Got gateway for $IFACE - IP $VPN_GW - ID $ID"
			CONNECTED=1
		} || {
			$LOGS "Searching gateway for $IFACE"
			sleep 3
		}
	done

	nvram set vpn_client"$CID"_rdnsmasq=0
	ip route add table $ID default via $VPN_GW dev $IFACE
	ip rule add fwmark $ID table $ID priority 1000

	modprobe xt_set
	modprobe ip_set
	modprobe ip_set_hash_ip
	ipset create vpnrouting$ID hash:ip

	echo "#!/bin/sh" > $FIREWALL
	echo "echo 0 > /proc/sys/net/ipv4/conf/$IFACE/rp_filter" >> $FIREWALL
	echo "echo 0 > /proc/sys/net/ipv4/conf/all/rp_filter" >> $FIREWALL
	echo "iptables -t mangle -A PREROUTING -m set --match-set vpnrouting$ID dst,src -j MARK --set-mark $ID" >> $FIREWALL

	# example of routing_val: 1<2<8.8.8.8>1<1<1.2.3.4>1<3<domain.com>
	for i in $(echo "$(nvram get vpn_"$SERVICE"_routing_val)" | tr ">" "\n"); do
		VAL1=$(echo $i | cut -d "<" -f1)
		VAL2=$(echo $i | cut -d "<" -f2)
		VAL3=$(echo $i | cut -d "<" -f3)

		# only if rule is enabled
		[ "$VAL1" == "1" ] && {
			case "$VAL2" in
			     1)		# from source
					$LOGS "Type: $VAL2 - add $VAL3"
					echo "iptables -t mangle -A PREROUTING -s $VAL3 -j MARK --set-mark $ID" >> $FIREWALL
				;;
			     2)		# to destination
					$LOGS "Type: $VAL2 - add $VAL3"
					echo "iptables -t mangle -A PREROUTING -d $VAL3 -j MARK --set-mark $ID" >> $FIREWALL
				;;
			     3)		# to domain
					$LOGS "Type: $VAL2 - add $VAL3"
					echo "ipset=/$VAL3/vpnrouting$ID" >> /etc/dnsmasq.ipset

					# try to add ipset rule using forced query to DNS server
					nslookup $VAL3 127.0.0.1 > /dev/null

					DNSMASQ=1
				;;
			     *) continue ;;
			esac
		}
	done

	chmod +x $FIREWALL
	service firewall restart

	[ "$DNSMASQ" -eq 1 ] && {
		nvram set vpn_client"$CID"_rdnsmasq=1
		service dnsmasq restart
	}

	$LOGS "Completed routing policy configuration for $SERVICE"
}

stopRouting() {
	cleanup

	[ "$(nvram get vpn_client"$CID"_rdnsmasq)" -eq 1 ] && service dnsmasq restart
}

checkPid() {
	local PIDNO

	[ -f $PIDFILE ] && {
		PIDNO=$(cat $PIDFILE)
		cat "/proc/$PIDNO/cmdline" > /dev/null 2>&1

		[ $? -eq 0 ] && {
			# priority has the last process
			$LOGS "Killing previous process ..."
			kill -9 $PIDNO
			echo $PID > $PIDFILE

			[ $? -ne 0 ] && {
				$LOGS "Could not create PID file"
				exit 0
			}
		} || {
			# process not found assume not running
			echo $PID > $PIDFILE
			[ $? -ne 0 ] && {
				$LOGS "Could not create PID file"
				exit 0
			}
		}
	} || {
		echo $PID > $PIDFILE
		[ $? -ne 0 ] && {
			$LOGS "Could not create PID file"
			exit 0
		}
	}
}


###################################################


if [ "$2" == "start" ]; then
	find_iface

	checkPid

	startRouting

elif [ "$2" == "stop" ]; then
	find_iface

	checkPid

	stopRouting

else
	echo "vpnrouting: unsupported command"
	exit 0
fi


rm -f $PIDFILE > /dev/null 2>&1
