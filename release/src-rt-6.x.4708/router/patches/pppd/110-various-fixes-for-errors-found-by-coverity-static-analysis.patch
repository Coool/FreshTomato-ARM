--- pppd/chat/chat.c
+++ pppd/chat/chat.c
@@ -513,6 +513,7 @@ void msgf __V((const char *fmt, ...))
 	syslog(LOG_INFO, "%s", line);
     if (to_stderr)
 	fprintf(stderr, "%s\n", line);
+    va_end(args);
 }
 
 /*
@@ -538,6 +539,7 @@ void fatal __V((int code, const char *fm
 	syslog(LOG_ERR, "%s", line);
     if (to_stderr)
 	fprintf(stderr, "%s\n", line);
+    va_end(args);
     terminate(code);
 }
 
--- pppd/pppd/auth.c
+++ pppd/pppd/auth.c
@@ -432,6 +432,7 @@ setupapfile(argv)
     euid = geteuid();
     if (seteuid(getuid()) == -1) {
 	option_error("unable to reset uid before opening %s: %m", fname);
+	free(fname);
 	return 0;
     }
     ufile = fopen(fname, "r");
@@ -439,6 +440,7 @@ setupapfile(argv)
 	fatal("unable to regain privileges: %m");
     if (ufile == NULL) {
 	option_error("unable to open user login data file %s", fname);
+	free(fname);
 	return 0;
     }
     check_access(ufile, fname);
@@ -449,6 +451,7 @@ setupapfile(argv)
 	|| fgets(p, MAXSECRETLEN - 1, ufile) == NULL) {
 	fclose(ufile);
 	option_error("unable to read user login data file %s", fname);
+	free(fname);
 	return 0;
     }
     fclose(ufile);
@@ -470,6 +473,7 @@ setupapfile(argv)
 	explicit_passwd = 1;
     }
 
+    free(fname);
     return (1);
 }
 
--- pppd/pppd/multilink.c
+++ pppd/pppd/multilink.c
@@ -445,9 +445,13 @@ get_default_epdisc(ep)
 	if (p != 0 && get_if_hwaddr(ep->value, p) >= 0) {
 		ep->class = EPD_MAC;
 		ep->length = 6;
+		free(p);
 		return 1;
 	}
 
+	if (p)
+		free(p);
+
 	/* see if our hostname corresponds to a reasonable IP address */
 	hp = gethostbyname(hostname);
 	if (hp != NULL) {
--- pppd/pppd/plugins/rp-pppoe/if.c
+++ pppd/pppd/plugins/rp-pppoe/if.c
@@ -133,7 +133,7 @@ openInterface(char const *ifname, UINT16
 
     /* Fill in hardware address */
     if (hwaddr) {
-	strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
+	strlcpy(ifr.ifr_name, ifname, IFNAMSIZ);
 	if (ioctl(fd, SIOCGIFHWADDR, &ifr) < 0) {
 	    error("Can't get hardware address for %s: %m", ifname);
 	    close(fd);
@@ -152,7 +152,7 @@ openInterface(char const *ifname, UINT16
     }
 
     /* Sanity check on MTU */
-    strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
+    strlcpy(ifr.ifr_name, ifname, IFNAMSIZ);
     if (ioctl(fd, SIOCGIFMTU, &ifr) < 0) {
 	error("Can't get MTU for %s: %m", ifname);
     } else if (ifr.ifr_mtu < ETH_DATA_LEN) {
@@ -166,7 +166,7 @@ openInterface(char const *ifname, UINT16
     sa.sll_family = AF_PACKET;
     sa.sll_protocol = htons(type);
 
-    strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
+    strlcpy(ifr.ifr_name, ifname, IFNAMSIZ);
     if (ioctl(fd, SIOCGIFINDEX, &ifr) < 0) {
 	error("Could not get interface index for %s: %m", ifname);
 	close(fd);
--- pppd/pppd/plugins/rp-pppoe/Makefile.linux
+++ pppd/pppd/plugins/rp-pppoe/Makefile.linux
@@ -33,10 +33,10 @@ pppoe-discovery: pppoe-discovery.o debug
 	$(CC) -o pppoe-discovery pppoe-discovery.o debug.o
 
 pppoe-discovery.o: pppoe-discovery.c
-	$(CC) $(CFLAGS) -c -o pppoe-discovery.o pppoe-discovery.c
+	$(CC) $(CFLAGS) -I../../.. -c -o pppoe-discovery.o pppoe-discovery.c
 
 debug.o: debug.c
-	$(CC) $(CFLAGS) -c -o debug.o debug.c
+	$(CC) $(CFLAGS) -I../../.. -c -o debug.o debug.c
 
 rp-pppoe.so: plugin.o discovery.o if.o common.o
 	$(CC) -o rp-pppoe.so -shared plugin.o discovery.o if.o common.o
--- pppd/pppd/plugins/rp-pppoe/plugin.c
+++ pppd/pppd/plugins/rp-pppoe/plugin.c
@@ -153,7 +153,7 @@ PPPOEConnectDevice(void)
 	error("Can't get MTU for %s: %m", conn->ifName);
 	goto errout;
     }
-    strncpy(ifr.ifr_name, conn->ifName, sizeof(ifr.ifr_name));
+    strlcpy(ifr.ifr_name, conn->ifName, sizeof(ifr.ifr_name));
     if (ioctl(s, SIOCGIFMTU, &ifr) < 0) {
 	error("Can't get MTU for %s: %m", conn->ifName);
 	close(s);
@@ -327,7 +327,7 @@ PPPoEDevnameHook(char *cmd, char **argv,
 
     /* Try getting interface index */
     if (r) {
-	strncpy(ifr.ifr_name, cmd, sizeof(ifr.ifr_name));
+	strlcpy(ifr.ifr_name, cmd, sizeof(ifr.ifr_name));
 	if (ioctl(fd, SIOCGIFINDEX, &ifr) < 0) {
 	    r = 0;
 	} else {
@@ -346,7 +346,7 @@ PPPoEDevnameHook(char *cmd, char **argv,
     /* Close socket */
     close(fd);
     if (r && doit) {
-	strncpy(devnam, cmd, sizeof(devnam));
+	strlcpy(devnam, cmd, sizeof(devnam));
 	if (the_channel != &pppoe_channel) {
 
 	    the_channel = &pppoe_channel;
--- pppd/pppd/plugins/rp-pppoe/pppoe-discovery.c
+++ pppd/pppd/plugins/rp-pppoe/pppoe-discovery.c
@@ -172,7 +172,8 @@ openInterface(char const *ifname, UINT16
     sa.sll_family = AF_PACKET;
     sa.sll_protocol = htons(type);
 
-    strncpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
+    strncpy(ifr.ifr_name, ifname, IFNAMSIZ);
+    ifr.ifr_name[IFNAMSIZ - 1] = 0;
     if (ioctl(fd, SIOCGIFINDEX, &ifr) < 0) {
 	fatalSys("ioctl(SIOCFIGINDEX): Could not get interface index");
     }
--- pppd/pppd/plugins/rp-pppoe/pppoe.h
+++ pppd/pppd/plugins/rp-pppoe/pppoe.h
@@ -15,13 +15,12 @@
 
 #include "config.h"
 
-#if defined(HAVE_NETPACKET_PACKET_H) || defined(HAVE_LINUX_IF_PACKET_H)
-#define _POSIX_SOURCE 1 /* For sigaction defines */
-#endif
 
 #include <stdio.h>		/* For FILE */
 #include <sys/types.h>		/* For pid_t */
 
+#include "pppd/pppd.h"		/* For error */
+
 /* How do we access raw Ethernet devices? */
 #undef USE_LINUX_PACKET
 #undef USE_BPF
--- pppd/pppd/plugins/winbind.c
+++ pppd/pppd/plugins/winbind.c
@@ -432,6 +432,7 @@ unsigned int run_ntlm_auth(const char *u
 
         /* parent */
         if (close(child_out[0]) == -1) {
+                close(child_in[1]);
                 notice("error closing pipe?!? for child OUT[0]");
                 return NOT_AUTHENTICATED;
         }
--- pppd/pppd/sys-linux.c
+++ pppd/pppd/sys-linux.c
@@ -2154,7 +2154,6 @@ int ppp_available(void)
 		}
 	    }
 
-	    close (s);
 	    if (!ok) {
 		slprintf(route_buffer, sizeof(route_buffer),
 			 "Sorry - PPP driver version %d.%d.%d is out of date\n",
@@ -2164,6 +2163,7 @@ int ppp_available(void)
 	    }
 	}
     }
+    close (s);
     return ok;
 }
 
@@ -2642,7 +2642,10 @@ get_pty(master_fdp, slave_fdp, slave_nam
 		warn("Couldn't unlock pty slave %s: %m", pty_name);
 #endif
 	    if ((sfd = open(pty_name, O_RDWR | O_NOCTTY)) < 0)
+	    {
 		warn("Couldn't open pty slave %s: %m", pty_name);
+		close(mfd);
+	    }
 	}
     }
 #endif /* TIOCGPTN */
